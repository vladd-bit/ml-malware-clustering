import glob
import os
import time

import _pickle as cpickle
import re
import zipfile
import csv

from sklearn.feature_extraction import DictVectorizer

from src.errorLog import Log


def read_all_zip_files_in_path(input_folder, folder_lookup_name):
    file_path_list = {}
    pattern = ''
    if folder_lookup_name != '':
        pattern = re.compile(folder_lookup_name + '[0-9]+.?([0-9]+)?$')
    else:
        pattern = '*'

    for root, sub_directories, files in os.walk(input_folder):

        if re.search(pattern, root):
            for file_name in files:
                file_path = os.path.join(root, file_name)

                if zipfile.is_zipfile(file_path):
                    file_path_list[file_name] = file_path

    return file_path_list


def read_all_classified_data_csv(csv_file_path):
    data = None

    with open(csv_file_path) as csv_file:
        reader = csv.reader(csv_file)
        next(reader)  # ignore first line (header of file)
        data = [row for row in reader]

    return data


def read_files_in_folder(input_folder=None, lookup_files=None, is_binary=False, include_all_samples=False):
    file_data = {}
    file_data_unidentified = {}

    if lookup_files is not None and input_folder is not None:
        if is_binary:
            file_names = os.listdir(input_folder)
            if lookup_files in file_names:
                with open(input_folder + lookup_files, mode='rb') as file:
                    file_data = cpickle.load(file)
        else:
            for file_path in glob.iglob(input_folder):
                file_name = os.path.basename(file_path)
                try:
                    if file_name in list(lookup_files):
                        with open(file_path, mode='r') as file:
                            lines = list(line for line in (l.strip() for l in file) if line)
                            if file_name in file_data.keys():
                                file_data[file_name].extend(lines)
                            else:
                                file_data[file_name] = lines
                    elif include_all_samples:
                        with open(file_path, mode='r') as file:
                            lines = list(line for line in (l.strip() for l in file) if line)
                            if file_name in file_data_unidentified.keys():
                                file_data_unidentified[file_name].extend(lines)
                            else:
                                file_data_unidentified[file_name] = lines

                except OSError as exception:
                    Log.log_message(log_level="ERROR",
                                    log_message='cannot process file:' + file_name + ' path:' + input_folder,
                                    exception=exception)

    elif lookup_files is not None:

        try:
            if is_binary:
                with open(lookup_files, mode='rb') as file:
                    file_data = cpickle.load(file)
            else:
                with open(lookup_files, mode='r') as file:
                    file_data = file.read()

        except OSError as exception:
            Log.log_message(log_level="ERROR",
                            log_message='cannot process file from path path:' + lookup_files,
                            exception=exception)
    if is_binary:
        return file_data

    return file_data, file_data_unidentified
