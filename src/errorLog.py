import os
import sys
import logging


class Log:

    @staticmethod
    def log_message(log_folder='log', log_level="ERROR", log_message='',
                    exception=None, use_output_dir=True, log_file=''):

        root_dir = sys.path[0]

        log_folder_path = root_dir + "/" + os.path.dirname(log_folder)

        if use_output_dir:
            from malwareClustering import output_directory
            log_folder_path = output_directory + log_folder

        log_level_types = {
            "CRITICAL": 50,
            "ERROR": 40,
            "WARNING": 30,
            "INFO": 20,
            "DEBUG": 10,
            "NOTSET": 0
        }

        if not os.path.exists(log_folder_path):
            os.makedirs(log_folder_path)

        # get the function from switcher dictionary
        log_level_type = log_level_types.get(log_level, "LOG")

        log_file_path = log_folder_path + "/" + (log_level if log_file is '' else log_file)

        logger = logging.getLogger(log_file_path)

        logger.setLevel(level=log_level_type)

        if not os.path.isfile(log_file_path):
            log_file = open(log_file_path, "w")
            log_file.close()

        formatter = logging.Formatter('%(asctime)s %(levelname)s : %(message)s')

        # create file handler which logs even debug messages

        if not logger.handlers:
            file_handler = logging.FileHandler(log_file_path, 'a')
            file_handler.setLevel(level=log_level_type)
            file_handler.setFormatter(formatter)

            console_handler = logging.StreamHandler()
            console_handler.setLevel(log_level_type)
            console_handler.setFormatter(formatter)

            logger.addHandler(file_handler)
            logger.addHandler(console_handler)

        # log the message
        if exception is not None:
            logger.log(level=log_level_type, msg='exception:' + exception)
        else:
            logger.log(level=log_level_type, msg=log_message)
